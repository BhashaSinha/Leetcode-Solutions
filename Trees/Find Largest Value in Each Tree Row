class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int n = queue.size();
            int max = Integer.MIN_VALUE;

            for (int i = 0; i < n; i++) {
                TreeNode curr = queue.poll();

                // curr is a TreeNode; curr.val gives its integer value
                max = Math.max(max, curr.val); 

                if (curr.left != null) queue.offer(curr.left); // enqueue left child
                if (curr.right != null) queue.offer(curr.right); // enqueue right child
            }

            result.add(max); // add max value of this level
        }

        return result;
    }
}
/*
Time Complexity: O(n)
- Each node is visited exactly once in BFS traversal.

Space Complexity: O(n)
- In the worst case (complete binary tree), the queue may hold up to n/2 nodes at the last level.
- Result list stores one value per level â†’ O(h), where h is height of the tree.
- Total = O(n)

Extra Note:
- curr is a TreeNode, so we use curr.val to access the integer stored in the node.
*/
