class Solution {
    int n;
    int[][] dp;

    public int solve(int[][] nums, int prev, int curr) {
       
        if (curr == n) {
            return 0;
        }

        if (prev != -1 && dp[prev][curr] != -1) {
            return dp[prev][curr];
        }

        int take = 0;
        if (prev == -1 || nums[curr][0] > nums[prev][1]) {
            take = 1 + solve(nums, curr, curr + 1);
        }

        int skip = solve(nums, prev, curr + 1);

        if (prev != -1) {
            dp[prev][curr] = Math.max(take, skip);
        }

        return Math.max(take, skip);
    }

    public int findLongestChain(int[][] pairs) {
        n = pairs.length;
        dp = new int[n][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        Arrays.sort(pairs, Comparator.comparingInt(a -> a[0]));

        return solve(pairs, -1, 0);
    }
}
